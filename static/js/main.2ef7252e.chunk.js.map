{"version":3,"sources":["components/Map/Map.module.css","components/Navigation/Navigation.module.css","components/Map/Map.js","components/Navigation/Navigation.js","store/actions/actionTypes.js","store/actions/covid19.js","App.js","reportWebVitals.js","store/reducer/covid19.js","index.js"],"names":["module","exports","Map","icon","Icon","iconUrl","iconSize","map","this","props","data","length","MapContainer","center","zoom","minZoom","maxZoom","maxBounds","TileLayer","url","attribution","noWrap","info","Marker","position","countryInfo","lat","long","Popup","className","classes","src","flag","alt","country","cases","deaths","recovered","Date","updated","toLocaleString","Component","Navigation","Nav","SET_INFO","initInfo","dispatch","axios","get","then","response","type","actionTypes","App","onInitInfo","connect","state","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","actions","store","createStore","covid19Reducer","applyMiddleware","thunk","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,MAAQ,qB,mBCA1BD,EAAOC,QAAU,CAAC,IAAM,0B,oOC+CTC,E,uKAxCP,IAAMC,EAAO,IAAIC,OAAK,CAClBC,QAAS,kEACTC,SAAU,CAAC,GAAI,MAGfC,EAAM,gDA2BV,OAzBIC,KAAKC,MAAMC,KAAKC,OAAS,IACzBJ,EACI,eAACK,EAAA,EAAD,CAAcC,OAAQ,CAAC,EAAG,GAAIC,KAAM,EAAGC,QAAS,EAAGC,QAAS,GAAIC,UAAW,CAAC,CAAC,KAAM,KAAM,EAAE,IAAK,MAAhG,UACI,cAACC,EAAA,EAAD,CAAWC,IAAI,qDAAqDC,YAAY,0EAA0EC,QAAQ,IACjKb,KAAKC,MAAMC,KAAKH,KAAI,SAAAe,GACjB,OACI,cAACC,EAAA,EAAD,CAA2BC,SAAU,CAACF,EAAKG,YAAYC,IAAKJ,EAAKG,YAAYE,MAAOxB,KAAMA,EAA1F,SACA,cAACyB,EAAA,EAAD,UACI,sBAAKC,UAAWC,IAAQF,MAAxB,UACI,qBAAKG,IAAKT,EAAKG,YAAYO,KAAMC,IAAKX,EAAKY,QAAU,UACrD,6BAAKZ,EAAKY,UACV,+BACI,+BAAI,gDAAJ,IAAiCZ,EAAKa,SACtC,+BAAI,6CAAJ,IAA8Bb,EAAKc,UACnC,+BAAI,gDAAJ,IAAiCd,EAAKe,aACtC,+BAAI,kDAAJ,IAAmC,IAAIC,KAAKhB,EAAKiB,SAASC,6BATzDlB,EAAKY,gBAoBlC,cAAC,WAAD,UACK3B,Q,GArCCkC,a,iBCMHC,EARI,kBACf,iCACI,qBAAKb,UAAWC,IAAQa,IAAxB,SACI,sD,gBCNCC,EAAW,W,iBCUXC,EAAW,WACpB,OAAO,SAAAC,GACHC,IAAMC,IAAI,0CACLC,MAAM,SAAAC,GAVI,IAAA5B,EAWPwB,GAXOxB,EAWU4B,EAASxC,KAV/B,CACHyC,KAAMC,EACN9B,eCEF+B,E,kLAGF7C,KAAKC,MAAM6C,e,+BAIX,OACE,sBAAKzB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAKnB,KAAMF,KAAKC,MAAMa,c,GAVZmB,aA6BHc,eAZS,SAAAC,GACtB,MAAO,CACLlC,KAAMkC,EAAM9C,SAIW,SAAAoC,GACzB,MAAO,CACLQ,WAAY,kBAAMR,EAASD,SAIhBU,CAA6CF,GCzB7CI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,sBCLRO,EAAe,CACjBvD,KAAM,IAeKwD,EAZC,WAAoC,IAAnCV,EAAkC,uDAA1BS,EAAcE,EAAY,uCAC/C,OAAOA,EAAQhB,MACX,KAAKC,EACD,OAAO,2BACAI,GADP,IAEI9C,KAAMyD,EAAQ7C,OAEtB,QACI,OAAOkC,ICJbY,EAAQC,YAAYC,EAAgBC,YAAgBC,MAEpDC,EACJ,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAIJM,IAASC,OACP,cAAC,IAAMC,WAAP,UACGH,IAEHI,SAASC,eAAe,SAM1BrB,M","file":"static/js/main.2ef7252e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Popup\":\"Map_Popup__2qCrC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"Navigation_Nav__1qXl3\"};","import React, {Fragment, Component } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Icon } from 'leaflet';\nimport classes from './Map.module.css';\n\nclass Map extends Component {\n    \n    render () {\n        const icon = new Icon({\n            iconUrl: 'https://cdn1.iconfinder.com/data/icons/locations-6/48/1-512.png',\n            iconSize: [30, 30]\n        });\n    \n        let map = <p>Data is Loading</p>\n        \n        if (this.props.data.length > 0) {\n            map = (\n                <MapContainer center={[0, 0]} zoom={3} minZoom={3} maxZoom={10} maxBounds={[[180, -180], [-180, 180]]}>\n                    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' noWrap={true} />\n                    {this.props.data.map(info => {\n                        return (\n                            <Marker key={info.country} position={[info.countryInfo.lat, info.countryInfo.long]} icon={icon}>\n                            <Popup>\n                                <div className={classes.Popup}>\n                                    <img src={info.countryInfo.flag} alt={info.country + \" flag\" }/>\n                                    <h2>{info.country}</h2>\n                                    <ul>\n                                        <li><strong>Confirmed:</strong> {info.cases}</li>\n                                        <li><strong>Deaths:</strong> {info.deaths}</li>\n                                        <li><strong>Recovered:</strong> {info.recovered}</li>\n                                        <li><strong>Last Update:</strong> {new Date(info.updated).toLocaleString()}</li>\n                                    </ul>\n                                </div>\n                            </Popup>\n                            </Marker>\n                        )\n                    })}\n                </MapContainer>\n            )\n        }\n        return (\n            <Fragment>\n                {map}\n            </Fragment>\n        )\n    }\n}\n\nexport default Map;","import React from 'react';\nimport classes from './Navigation.module.css';\n\nconst Navigation = () => (\n    <header>\n        <nav className={classes.Nav}>\n            <h1>COVID19 TRACKER</h1>\n        </nav>\n    </header>\n);\n\nexport default Navigation\n\n","export const SET_INFO = 'SET_INFO';","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const setInfo = info => {\n    return {\n        type: actionTypes.SET_INFO,\n        info\n    }\n}\n\nexport const initInfo = () => {\n    return dispatch => {\n        axios.get('https://corona.lmao.ninja/v2/countries')\n            .then( response => {\n                dispatch(setInfo(response.data));\n            })\n    }\n}","import './App.css';\nimport React, { Component } from 'react';\nimport Map from './components/Map/Map';\nimport Navigation from './components/Navigation/Navigation';\nimport 'leaflet/dist/leaflet.css';\nimport { connect } from 'react-redux';\nimport { initInfo } from './store/actions/covid19';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onInitInfo();\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Map data={this.props.info}/>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    info: state.data\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInitInfo: () => dispatch(initInfo())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    data: []\n}\n\nconst reducer = (state = initialState, actions) => {\n    switch(actions.type) {\n        case actionTypes.SET_INFO:\n            return {\n                ...state,\n                data: actions.info\n            };\n        default: \n            return state\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport covid19Reducer from './store/reducer/covid19';\n\nconst store = createStore(covid19Reducer, applyMiddleware(thunk));\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    {app}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Map/Map.module.css","components/Navigation/Navigation.module.css","store/actions/actionTypes.js","store/actions/covid19.js","components/Map/Map.js","components/Navigation/Navigation.js","components/Statistics/Statistics.js","App.js","reportWebVitals.js","store/reducer/covid19.js","index.js"],"names":["module","exports","SET_INFO","SET_STAT","FETCH_START","FETCH_SUCCESS","fetchStart","type","actionTypes","fetchSuccess","initInfo","dispatch","axios","get","then","response","info","data","initStat","stat","Map","this","props","onInitInfo","icon","Icon","iconUrl","iconSize","map","length","MapContainer","center","zoom","minZoom","maxZoom","maxBounds","TileLayer","url","attribution","noWrap","Marker","position","countryInfo","lat","long","Popup","className","classes","src","flag","alt","country","cases","deaths","recovered","Date","updated","toLocaleString","Component","connect","state","Navigation","Nav","Statistics","commafy","value","numberString","split","reverse","reduce","prev","current","index","shouldComma","updatedValue","join","onInitStat","dashboardStats","primary","label","Math","trunc","secondary","casesPerOneMillion","deathsPerOneMillion","tests","testsPerOneMillion","loading","TrackerStats","List","i","TrackerStat","TrackerStatPrimary","TrackerStatSecondary","statistics","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducer","actions","store","createStore","covid19Reducer","applyMiddleware","thunk","app","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b7461c10.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TrackerStats\":\"Statistics_TrackerStats__1BU8f\",\"List\":\"Statistics_List__ujLfc\",\"TrackerStat\":\"Statistics_TrackerStat__Z8Hv9\",\"TrackerStatPrimary\":\"Statistics_TrackerStatPrimary__OLNve\",\"TrackerStatSecondary\":\"Statistics_TrackerStatSecondary__1hpz_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Popup\":\"Map_Popup__2qCrC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Nav\":\"Navigation_Nav__1qXl3\"};","export const SET_INFO = 'SET_INFO';\nexport const SET_STAT = 'SET_STAT';\n\nexport const FETCH_START = 'FETCH_START';\nexport const FETCH_SUCCESS = 'FETCH_SUCCESS';","import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const fetchStart = () => {\n    return {\n        type: actionTypes.FETCH_START\n    }\n}\n\nexport const fetchSuccess = () => {\n    return {\n        type: actionTypes.FETCH_SUCCESS\n    }\n}\n\nexport const setInfo = info => {\n    return {\n        type: actionTypes.SET_INFO,\n        info\n    }\n}\n\nexport const setStatInfo = stat => {\n    return {\n        type: actionTypes.SET_STAT,\n        stat\n    }\n}\n\nexport const initInfo = () => {\n    return dispatch => {\n        dispatch(fetchStart());\n        axios.get('https://corona.lmao.ninja/v3/covid-19/countries')\n            .then( response => {\n                dispatch(setInfo(response.data));\n                dispatch(fetchSuccess());\n            })\n    }\n}\n\nexport const initStat = () => {\n    return dispatch => {\n        dispatch(fetchStart());\n        axios.get('https://corona.lmao.ninja/v3/covid-19/all')\n            .then( response => {\n                dispatch(setStatInfo(response.data));\n                dispatch(fetchSuccess());\n            })\n    }\n}\n\n","import React, {Fragment, Component } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport { Icon } from 'leaflet';\nimport classes from './Map.module.css';\nimport { connect } from 'react-redux';\nimport { initInfo } from '../../store/actions/covid19';\n\nclass Map extends Component {\n    \n  componentDidMount() {\n    this.props.onInitInfo();\n  }\n    \n    render () {\n        const icon = new Icon({\n            iconUrl: 'https://cdn1.iconfinder.com/data/icons/locations-6/48/1-512.png',\n            iconSize: [30, 30]\n        });\n    \n        let map = <p>Data is Loading</p>\n        \n        if (this.props.data.length > 0) {\n            map = (\n                <MapContainer center={[0, 0]} zoom={3} minZoom={3} maxZoom={10} maxBounds={[[180, -180], [-180, 180]]}>\n                    <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors' noWrap={true} />\n                    {this.props.data.map(info => {\n                        return (\n                            <Marker key={info.country} position={[info.countryInfo.lat, info.countryInfo.long]} icon={icon}>\n                            <Popup>\n                                <div className={classes.Popup}>\n                                    <img src={info.countryInfo.flag} alt={info.country + \" flag\" }/>\n                                    <h2>{info.country}</h2>\n                                    <ul>\n                                        <li><strong>Confirmed:</strong> {info.cases}</li>\n                                        <li><strong>Deaths:</strong> {info.deaths}</li>\n                                        <li><strong>Recovered:</strong> {info.recovered}</li>\n                                        <li><strong>Last Update:</strong> {new Date(info.updated).toLocaleString()}</li>\n                                    </ul>\n                                </div>\n                            </Popup>\n                            </Marker>\n                        )\n                    })}\n                </MapContainer>\n            )\n        }\n        return (\n            <Fragment>\n                {map}\n            </Fragment>\n        )\n    }\n}\n\n\nconst mapStateToProps = state => {\n    return {\n      data: state.data\n    }\n}\n  \nconst mapDispatchToProps = dispatch => {\n    return {\n      onInitInfo: () => dispatch(initInfo())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);","import React from 'react';\nimport classes from './Navigation.module.css';\n\nconst Navigation = () => (\n    <header>\n        <nav className={classes.Nav}>\n            <h1>COVID19 TRACKER</h1>\n        </nav>\n    </header>\n);\n\nexport default Navigation\n\n","import React, { Component } from 'react';\nimport { initStat } from '../../store/actions/covid19';\nimport { connect } from 'react-redux';\nimport classes from './Statistics.module.css';\n\nclass Statistics extends Component{\n\n    componentDidMount() {\n        this.props.onInitStat();\n    }\n\n    commafy = (value) => {\n        let numberString = `${value}`;\n      \n        numberString = numberString.split('');\n      \n        numberString.reverse();\n      \n        numberString = numberString.reduce((prev, current, index) => {\n            const shouldComma = (index + 1) % 3 === 0 && index + 1 < numberString.length;\n            let updatedValue = `${prev}${current}`;\n            if ( shouldComma ) {\n                updatedValue = `${updatedValue},`;\n            }\n            return updatedValue;\n        }, '');\n      \n        numberString = numberString.split('');\n        numberString.reverse()\n        numberString = numberString.join('');\n      \n        return numberString;\n    }\n\n    render() {\n        const dashboardStats = [\n            {\n              primary: {\n                label: 'Total Cases',\n                value: this.commafy(Math.trunc(this.props.data?.cases))\n              },\n              secondary: {\n                label: 'Per 1 Million',\n                value: this.commafy(Math.trunc(this.props.data?.casesPerOneMillion))\n              }\n            },\n            {\n              primary: {\n                label: 'Total Deaths',\n                value: this.commafy(Math.trunc(this.props.data?.deaths))\n              },\n              secondary: {\n                label: 'Per 1 Million',\n                value: this.commafy(Math.trunc(this.props.data?.deathsPerOneMillion))\n              }\n            },\n            {\n              primary: {\n                label: 'Total Tests',\n                value: this.commafy(Math.trunc(this.props.data?.tests))\n              },\n              secondary: {\n                label: 'Per 1 Million',\n                value: this.commafy(Math.trunc(this.props.data?.testsPerOneMillion))\n              }\n            }\n        ];\n\n        let stat = null;\n\n        if (!this.props.loading) {\n          stat = (\n            <div className={classes.TrackerStats}>\n                <ul className={classes.List}>\n                  { dashboardStats.map(({ primary = {}, secondary = {} }, i) => {\n                      return (\n                      <li key={`Stat-${i}`} className={classes.TrackerStat}>\n                              <p className={classes.TrackerStatPrimary}>\n                                  { primary.value }\n                              </p>\n                              <strong>{ primary.label }</strong>\n                          \n                          \n                              <p className={classes.TrackerStatSecondary}>\n                                  { secondary.value }\n                                  <strong> { secondary.label }</strong>\n                              </p>\n                      </li>\n                      );\n                  })}\n                </ul>\n            </div>\n          )\n        }\n        \n        return stat\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n      data: state.statistics,\n      loading: state.loading\n    }\n}\n  \nconst mapDispatchToProps = dispatch => {\n    return {\n      onInitStat: () => dispatch(initStat())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Statistics);","import './App.css';\nimport React, { Component } from 'react';\nimport Map from './components/Map/Map';\nimport Navigation from './components/Navigation/Navigation';\nimport Statistics from './components/Statistics/Statistics';\nimport 'leaflet/dist/leaflet.css';\n\nclass App extends Component {\n\n  render () {\n    return (\n      <div className=\"App\">\n        <Navigation />\n        <Map />\n        <Statistics />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as actionTypes from '../actions/actionTypes';\n\nconst initialState = {\n    data: [],\n    statistics: {},\n    loading: false\n}\n\nconst reducer = (state = initialState, actions) => {\n    switch(actions.type) {\n        case actionTypes.SET_INFO:\n            return {\n                ...state,\n                data: actions.info\n            };\n        case actionTypes.SET_STAT:\n            return {\n                ...state,\n                statistics: actions.stat\n            }\n        case actionTypes.FETCH_START:\n            return{\n                ...state,\n                loading: true\n            }\n        case actionTypes.FETCH_SUCCESS:\n            return{\n                ...state,\n                loading: false\n            }\n        default: \n            return state\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport covid19Reducer from './store/reducer/covid19';\n\nconst store = createStore(covid19Reducer, applyMiddleware(thunk));\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    {app}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}